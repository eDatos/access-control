import "classpath:/btdesign/metamac-access-control-core-dtos.btdesign"
import "classpath:/btdesign/metamac-access-control-core-lists.btdesign"

import "classpath:/btdesign/export/metamac-core-common-basictype.btdesign" 
import "classpath:/btdesign/export/metamac-core-common-vo.btdesign" 
import "classpath:/btdesign/export/metamac-core-common-entity.btdesign" 
 
Application Base {
    basePackage=unused

    Module base {
		basePackage=org.siemac.metamac.access.control.base
		
		"Roles definitions"
		Entity Role {
			databaseTable="TBL_ROLES"
			hint="idSequence=ROLES"
			
			gap
			
			"SEMANTIC IDENTIFIER"
       		String code not nullable;
       		"TITLE"
       		String title not nullable;
       		"DESCRIPTION"
       		String description nullable;

		
			Repository RoleRepository {
				findById;
		   		findAll;
		   		save;
		   		delete;
		   		findByQuery;
		   		findByCondition;
			}
		}  
		
		
		"Applications"
		Entity App {
			databaseTable="TBL_APPS"
			hint="idSequence=APPS"
			
			gap
			
			"SEMANTIC IDENTIFIER"
       		String code not nullable;
       		"TITLE"
       		String title not nullable;
       		"DESCRIPTION"
       		String description nullable;

		
			Repository AppRepository {
				findById;
		   		findAll;
		   		save;
		   		delete;
		   		findByQuery;
		   		findByCondition;
			}
		}  
		
		"Users"
		Entity User {
			databaseTable="TBL_USERS"
			hint="idSequence=USERS"
			
			gap
			
			"SEMANTIC IDENTIFIER"
       		String username not nullable;
       		"NAME"
       		String name not nullable;
       		"SURNAME"
       		String surname not nullable;
       		"E-MAIL"
       		String mail not nullable;

			Repository UserRepository {
				findById;
		   		findAll;
		   		save;
		   		delete;
		   		findByQuery;
		   		findByCondition;
			}
		}  
		
		
		"Access"
		Entity Access {
			databaseTable="TBL_ACCESS"
			hint="idSequence=ACCESS"
			
			gap
			
			"ROLE"
			- @Role role not nullable cascade="none" databaseColumn="ROLE_FK";
			"APP"
			- @App app not nullable cascade="none" databaseColumn="APP_FK";
			"USER"
			- @User user not nullable cascade="none" databaseColumn="USER_FK";
			"OPERATION"
       		- @ExternalItemBt operation nullable;
			
			"DISCHARGE DATE"
			DateTimeTZ dischargeDate nullable;
			
			Repository AccessRepository {
				findById;
		   		findAll;
		   		save;
		   		delete;
		   		findByQuery;
		   		findByCondition;
			}
		}  
		
		
		
		"Provides access to AccessControlServiceFacade"
		Service AccessControlBaseServiceFacade {
       		> @AccessControlBaseService
       		
       		"Role"
       		@RoleDto createRole(@RoleDto roleDto) throws MetamacException;
       		@RoleDto updateRole(@RoleDto roleDto) throws MetamacException;
       		deleteRole (Long roleId) throws MetamacException;
       		List<@RoleDto> findAllRoles throws MetamacException;
       		List<@RoleDto> findRoleByCondition(List<ConditionalCriteria> condition) throws MetamacException;
       		@RoleDto findRoleById (Long id) throws MetamacException;
       		
       		"App"
       		@AppDto createApp(@AppDto appDto) throws MetamacException;
       		@AppDto updateApp(@AppDto appDto) throws MetamacException;
       		deleteApp (Long appId) throws MetamacException;
       		List<@AppDto> findAllApps throws MetamacException;
       		List<@AppDto> findAppByCondition(List<ConditionalCriteria> condition) throws MetamacException;
       		@AppDto findAppById (Long id) throws MetamacException;
       		
       		"User"
       		@UserDto createUser(@UserDto userDto) throws MetamacException;
       		@UserDto updateUser(@UserDto userDto) throws MetamacException;
       		deleteUser (Long userId) throws MetamacException;
       		List<@UserDto> findAllUsers throws MetamacException;
       		List<@UserDto> findUserByCondition(List<ConditionalCriteria> condition) throws MetamacException;
       		@UserDto findUserById (Long id) throws MetamacException;
       		
       		"Access"
       		@AccessDto createAccess(@AccessDto accessDto) throws MetamacException;
       		@AccessDto updateAccess(@AccessDto accessDto) throws MetamacException;
       		deleteAccess (Long accessId) throws MetamacException;
       		List<@AccessDto> findAllAccess throws MetamacException;
       		List<@AccessDto> findAccessByCondition(List<ConditionalCriteria> condition) throws MetamacException;
       		@AccessDto findAccessById (Long id) throws MetamacException;
       	}
		
		
		"Provides access to ACCESS-CONTROL Artefacts"
 		Service AccessControlBaseService {
 			> @RoleRepository
 			> @AppRepository
 			> @UserRepository
 			> @AccessRepository
			
       		"Role" 
       		@Role findRoleById(Long id) throws MetamacException;
    		@Role saveRole(@Role entity) throws MetamacException;
    		deleteRole(@Role entity) throws MetamacException;
    		List<@Role> findAllRoles throws MetamacException;
    		List<@Role> findRoleByCondition(List<ConditionalCriteria> condition) throws MetamacException;
			
			"App"			
			@App findAppById(Long id) throws MetamacException;
			@App saveApp(@App entity) throws MetamacException;
			deleteApp(@App entity) throws MetamacException;
			List<@App> findAllApps throws MetamacException;
			List<@App> findAppByCondition(List<ConditionalCriteria> condition) throws MetamacException;
			
			"User"		
			@User findUserById(Long id) throws MetamacException;
			@User saveUser(@User entity) throws MetamacException;
			deleteUser(@User entity) throws MetamacException;
			List<@User> findAllUsers throws MetamacException;
			List<@User> findUserByCondition(List<ConditionalCriteria> condition) throws MetamacException;
			
			"Access"		
			@Access findAccessById(Long id) throws MetamacException;
			@Access saveAccess(@Access entity) throws MetamacException;
			deleteAccess(@Access entity) throws MetamacException;
			List<@Access> findAllAccess throws MetamacException;
			List<@Access> findAccessByCondition(List<ConditionalCriteria> condition) throws MetamacException;
	   }
		
    }
}